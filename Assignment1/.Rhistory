## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## Conversion d'un id en nom de fichier
convid <- function (id) {
base <- as.character(id)
if (nchar(base)==1) {
file_name <- paste("00",base,".csv", sep = "")
} else if (nchar(base)==2) {
file_name <- paste("0",base,".csv", sep = "")
} else {
file_name <- paste(base,".csv", sep = "")
}
file_name
}
for (i in id) {
file_name <- paste(directory,"/",convid(i), sep = "")
data <- read.table(file_name, T, ",")
nobs <- sum(complete.cases(data))
if (i==id[1]) {
df <- data.frame (id = i, nobs = nobs)
} else {
df <- rbind(df,data.frame (id = i, nobs = nobs))
}
}
df
}
complete("specdata", 1:3)
complete("specdata", 30:25)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
submit()
submit()
submit()
corr <- vector()
corr
help(vector)
corr <- vector(mode = "numeric")
corr
length(corr)
corr[length(corr)+1] <- 2
corr
orr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
convid <- function (id) {
base <- as.character(id)
if (nchar(base)==1) {
file_name <- paste("00",base,".csv", sep = "")
} else if (nchar(base)==2) {
file_name <- paste("0",base,".csv", sep = "")
} else {
file_name <- paste(base,".csv", sep = "")
}
file_name
}
#       source("complete.R")
#       df <- complete("directory")
corr <- vector(mode = "numeric")
for (i in 1:332) {
file_name <- paste(directory,"/",convid(i), sep = "")
data <- read.table(file_name, T, ",")
nobs <- sum(complete.cases(data))
if (nobs>threshold) {
corr[length(corr)+1] <- 2
}
}
corr
}
corr("specdata",1000)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
convid <- function (id) {
base <- as.character(id)
if (nchar(base)==1) {
file_name <- paste("00",base,".csv", sep = "")
} else if (nchar(base)==2) {
file_name <- paste("0",base,".csv", sep = "")
} else {
file_name <- paste(base,".csv", sep = "")
}
file_name
}
#       source("complete.R")
#       df <- complete("directory")
corr <- vector(mode = "numeric")
for (i in 1:332) {
file_name <- paste(directory,"/",convid(i), sep = "")
data <- read.table(file_name, T, ",")
nobs <- sum(complete.cases(data))
if (nobs>threshold) {
corr[length(corr)+1] <- 2
}
}
corr
}
corr("specdata",1000)
?cor
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
convid <- function (id) {
base <- as.character(id)
if (nchar(base)==1) {
file_name <- paste("00",base,".csv", sep = "")
} else if (nchar(base)==2) {
file_name <- paste("0",base,".csv", sep = "")
} else {
file_name <- paste(base,".csv", sep = "")
}
file_name
}
#       source("complete.R")
#       df <- complete("directory")
corr <- vector(mode = "numeric")
for (i in 1:332) {
file_name <- paste(directory,"/",convid(i), sep = "")
data <- read.table(file_name, T, ",")
nobs <- sum(complete.cases(data))
cdata <- data[complete.cases(data),]
if (nobs>threshold) {
corr[length(corr)+1] <- cor(cdata$nitrate,cdata$sulfate)
}
}
corr
}
corr("specdata",1000)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
submit()
submit()
submit()
lapply
x <- list(a= 1:5, b = rnorm(10))
x
lapply(x,mean)
x <- list(a= 1:5, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
x
lapply(x,mean)
x <- 1:4
x
lapply(x,mean)
lapply(x,runif)
help(runif)
runif(1)
runif(4)
class(runif(4))
runif(4)
class(runif(4))
runif(4)
lapply(x,runif, min = 0, max = 10) #    ... les autres arguments de la fonction
x <- list(a = matrix(1:4 ,2,2), b = matrix(1:6, 3, 2))
x
lapply(x,function(elt) elt[,1])
lapply(x,function(elt) elt[,1])
lapply(x,function(elt) elt[,1,drop = FALSE])
lapply(x,mean)
x <- list(a= 1:5, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
class(sapply(x,mean))
# Week3 : Loop functions - lapply
# ----------------------------------------------------------
# lapply :      loop over a list of object and evaluate a function on each elements
# sapply :      idem but to simplify the result
# apply :       Apply a function over the margins of an arry
# tapply :      Apply a function over subset of a vector
# mapply :      Multivariate version of lapply
# split
# lapply (1) list x (2) function (or the name of a function) 3 other via ...
# if x is not a list it will be coerced as a list using as.list...
lapply
x <- list(a= 1:5, b = rnorm(10))
lapply(x,mean)
# returns a list always
x <- list(a= 1:5, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
x
lapply(x,mean)
# names are preserved
x <- 1:4
x
help(runif)
runif(4)        # runif(x) genère x valeur entre 0 et 1 uniforme distri
class(runif(4))
lapply(x,runif)
lapply(x,runif, min = 0, max = 10) #    ... les autres arguments de la fonction
# "Anonymous functions"
x
lapply(x,paste, "aaa,"bbb,"ccc") #    ... les autres arguments de la fonction
lapply(x,paste, "aaa","bbb,"ccc") #    ... les autres arguments de la fonction
lapply(x,paste, "aaa","bbb") #    ... les autres arguments de la fonction
lapply(x,paste, "aaa","bbb","qqq") #    ... les autres arguments de la fonction
lapply(x,paste, "aaa","bbb","qqq","ccc") #    ... les autres arguments de la fonction
# "Anonymous functions"
x <- list(a = matrix(1:4 ,2,2), b = matrix(1:6, 3, 2))
x
lapply(x,function(elt) elt[,1])
lapply(x,function(elt) elt[,1,drop = FALSE])
# sapply will try to simplify the result of lapply if possible
# if the  result is a list where every elt is length 1 , then a vector is returned
# if the result is a list where every elt is a vector of the same length >1 , then a matrix is returned
# if it can't figure things out, a list is returned
x <- list(a= 1:5, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
x <- list(a= 1:5, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
class(sapply(x,mean))
str(apply)
x <- matrix(rnorm(200),20 10)
x
apply(x,2,mean)
apply(x, 2, mean)
x <- matrix(rnorm(200),20, 10)
x
apply(x, 2, mean)
apply(x, 1, sum)
str(rowSums)
rowSums(x)
apply(x,1,sum)
apply(x,1,mean)
rowMeans(x)
apply(x,1,mean)
colSums(x)
apply(x,2,sum)
colMeans(x)
apply(x,2,mean)
apply(x,1,quantile, probs = c(0.25,0.75))
str(quantile)
help(quantile)
str(quantile)
x
dim(x)
attributes(x)
y <- apply(x,1,quantile, probs = c(0.25,0.75))
dim(y)
y <- apply(x,1,sum)
dim(y)
class(y)
length(y)
# Array
a <- array(rnorm(2*2*10), c(2,2,10))
class(a)
Attributes(a)
attributes(a)
# Dimension 3
apply(a, c(1,2), mean)
apply(a, 1, mean)
rowMeans(a, dims =2)
rowMeans(a, dims =2)
apply(a, c(1,2), mean)
apply(a, 1, mean)
rowMeans(a, dims =2)
b <- array(rnorm(2*2*2*10), c(2,2,2,10))
dim(b)
apply(b,c(1,2,3), mean)
rowMeans(a, dims =2)
rowMeans(a, dims =3)
rowMeans(a, dims =1)
rowMeans(a, dims =0)
rowMeans(a, dims =1)
help(rowMean)
help(rowMeans)
rowMeans(a, dims =3) # dims = 2 dimensions are regarded as ‘rows’ or ‘columns’ to sum ove
rowMeans(a, dims =2) # dims = 2 dimensions are regarded as ‘rows’ or ‘columns’ to sum ove
rowMeans(b, dims =3) # dims = 2 dimensions are regarded as ‘rows’ or ‘columns’ to sum ove
apply(b,c(1,2), mean)
rowMeans(b, dims =3) # dims = 2 dimensions are regarded as ‘rows’ or ‘columns’ to sum ove
apply(b,c(1,2,3), mean) # garde les dim 1,2,3 et somme sur la 4
y <- apply(b,c(1,2,3), mean) # garde les dim 1,2,3 et somme sur la 4
y
class(y)
dim(y)
apply(b,c(1,2), mean)
rowMeans(b, dims =2) # dims = 2 dimensions are regarded as ‘rows’ or ‘columns’ to sum ove
str(mapply)
mapply(rep,1:4,4:1)
rep(1:4)
rep(1:4,4:1)
help(rep)
rep(1:4,2)
rep(1:4,5)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
noise <- function(n,mean,sd) {
rnorm(n,mean,sd)
}
noise(5,1,2)
mean(y)
y <- noise(5,1,2)
mean(y)
y <- noise(500,1,2)
mean(y)
sd(y)
y <- noise(5000,1,2)
mean(y)
sd(y)
y <- noise(5,1,2)
mean(y)
sd(y)
noise(1:5,1:5,2)
mapply(noise, 1:5, 1:5, 2)
list(noise(1,1,2), noise (2,2,2),noise(3,3,2), noise(4,4,2),noise(5,5,2))
# ----------------------------------------------------------
# Week3 : mapply
# ----------------------------------------------------------
str(mapply)
# 1) la fonction
rep(1:4)
help(rep)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
hist(runif(100))
hist(runif(10000))
hist(rnorm(10000))
hist(rnorm(10000,1))
f <- gl(3,10)
f
help(gl)
class(f)
levels(f)
tapply(x,f,mean)
help(tapply)
tapply(x,f,mean)
tapply(x,f,mean, simplify = FALSE)
listfactor <- list(gl(3,10),gl(6,5))
listfactor
tapply(x,listfactor,mean, simplify = FALSE)
tapply(x,f,range)
str(split)
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
class(airquality)
nrow(airquality)
table(airquality$Month)
class(irquality$Month))
class(airquality$Month))
class(airquality$Month)
class(factor(airquality$Month))
class(airquality$Month)
tapply(airquality$Ozone,airquality$Month,mean)
str(tapply)
tapply(airquality$Ozone,airquality$Month,mean, rm.na = TRUE)
tapply(airquality$Ozone,airquality$Month,mean, na.rm = TRUE)
str(tapply)
s <- split(airquality,airquality$Month)
s
lapply(s, function(x) colMeans(x[,c"Ozone","Solar.R","Wind"]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
class(f1)
interaction(f1,f2)
class(interaction(f1,f2))
split(x, list(f1,f2))
str(split(x, list(f1,f2)))
y <- split(x, list(f1,f2))
y
y <- split(x, list(f1,f2), drop = TRUE)
y
str(stop)
str(message)
str(warning)
warning()
log(-1)
printmessage <- function(x) {
if (x>0)
print("x is > 0")
else
print("x < 0")
invisible(x)
}
help(invisible)
printmessage(1)
printmessage(10)
printmessage(-50)
y <- printmessage(10)
y
y <- printmessage(100)
y
printmessage(NA)
printmessage2 <- function(x) {
if (is.na(x))
print("x missing")
else if (x>0)
print("x < 0")
else
print("x < 0")
invisible(x)    # prevent autoprinting
}
printmessage2(NA)
printmessage2(1)
y <- printmessage2(NA)
y
help(debug)
debug(printmessage)
debug(printmessage(10))
function(x) {
if (x>0)
print("x is > 0")
else
print("x < 0")
invisible(x)
}
x
mean(x)
z
mean(z)
traceback()
lm(x~y)
traceback)()
lm(x~y)
traceback()
debug(lm)
lm(x~y)
lm(x~y)
n
lm(x~y)
help(debug)
undebug(lm)
lm(x~y)
read.csv("nosuchfile")
options(error = recover)
read.csv("nosuchfile")
help(option)
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
iris
class(iris)
attributes(iris)
names(iris)
nrows(iris)
nrow(iris)
summary(iris)
class(iris$Species)
levels(iris$Species)
mean(iris$Sepal.Length[iris$species == "virginica"], rm.na = TRUE)
mean(iris$Sepal.Length[iris$species == "virginica"], na.rm = TRUE)
iris$species == "virginica"
iris$species = "virginica"
iris$species
library(datasets)
data(iris)
?iris
iris
class(iris)
attributes(iris)
names(iris)
nrow(iris)
summary(iris)
class(iris$Species)
levels(iris$Species)
iris$species
iris$Species
iris$Species == "virginica"
mean(iris$Sepal.Length[iris$Species == "virginica"], na.rm = TRUE)
s <- split(iris, iris$Species)
s
lapply(s, function(x) mean(x[,"Sepal.Length"], na.rm = TRUE))
mean(iris$Sepal.Length[iris$Species == "virginica"], na.rm = TRUE)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
View(mtcars)
