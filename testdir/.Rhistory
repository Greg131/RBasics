paste(c("X", "Y", "Z"), c("X", "Y", "Z"), sep = "") # si deux, ... element a elt...
paste(c("X", "Y", "Z","X", "Y", "Z"), sep = "") # si deux, ... element a elt...
paste(c("X", "Y", "Z","X", "Y", "Z"), collapse = " ") # si deux, ... element a elt...
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "") # si deux, ... element a elt...
paste(c("X", "Y", "Z"), c("X", "Y", "Z"), sep = "-") # si deux, ... element a elt...
paste(c("X", "Y", "Z","X", "Y", "Z"), sep = "-") # si deux, ... element a elt...
paste(c("X", "Y", "Z","X", "Y", "Z"), collapse = "-") # si deux, ... element a elt...
LETTERS
paste(LETTERS, 1:4, sep = "-") # recycling vector petit...
# ----------------------------------------------------------
# SWIRL R Programming 5: Missing Values
# ----------------------------------------------------------
# NA is used to represent any value that is 'not available'
x <- c(44, NA, 5, NA)
x*3
# 1000 draws from a standard normal distribution with y <- rnorm(1000)
y <- rnorm(1000)
hist(y)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100) # Selection de 100 elements au hasard dans un vecteur
v <- c("a","b","c","d")
test <- sample(v, 3) # Selection 3 au hasard dans un vecteur (sans repetition)
test <- sample(v, 5) # Selection de 100 elements au hasard dans un vecteur
test
test <- sample(v, 3) # Selection 3 au hasard dans un vecteur (sans repetition)
test <- sample(v, 5) # Selection de 100 elements au hasard dans un vecteur
test
hist(my_data)
y <- rnorm(1000)
hist(y)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100) # Selection de 100 elements au hasard dans un vecteur
hist(my_data)
y <- rnorm(1000)
hist(y)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100) # Selection de 100 elements au hasard dans un vecteur
hist(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA # NA is not really a value !!!!
class(my_data == NA) # Logical cependant...
sum(my_na) # R represents TRUE as the number 1 and FALSE as the number 0
hist(my_data[!my_na])
my_data[!my_na]
length(my_data[!my_na])
0/0
Inf-Inf
# ----------------------------------------------------------
# SWIRL R Programming 6: Subsetting Vectors
# ----------------------------------------------------------
# placing an 'index vector' in square brackets
y <- rnorm(20)
z <- rep(NA, 20)
x <- sample(c(y, z), 40) # Selection de 40 elements au hasard dans un vecteur
x
x[1:10]
# index vectors come in four different flavors --
# - logical vectors,
# - vectors of positive integers,
# - vectors of negative integers,
# - vectors of character
x[is.na(x)] # donne les NA
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0] # NA > 0 evaluates to NA
x > 0
x[!is.na(x) & x > 0]
# placing an 'index vector' in square brackets
y <- rnorm(20)
z <- rep(NA, 20)
x <- sample(c(y, z), 40) # Selection de 40 elements au hasard dans un vecteur
x
x[1:10]
# index vectors come in four different flavors --
# - logical vectors,
# - vectors of positive integers,
# - vectors of negative integers,
# - vectors of character
x[is.na(x)] # donne les NA
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0] # NA > 0 evaluates to NA
x > 0
x[!is.na(x) & x > 0]
m <- cbind(x,a)
a <- sample(c(y, z), 40) # Selection de 40 elements au hasard dans un vecteur
m <- cbind(x,a)
m
m[x > 0,] # NA > 0 evaluates to NA
m
m[x != 0,] # NA > 0 evaluates to NA
m
m[x != 0,] # NA > 0 evaluates to NA... valeur perdue pour la ligne
m[!is.na(x) & x > 0,]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(2, 10)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(2, 10)]
x[c(-2, -10)] # Tous les ??l??ments sauf les 2 et 10...
x[-1000] # ....
x[-c(2,10)] # Idem x[c(-2, -10)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(2, 10)]
x[c(-2, -10)] # Tous les ??l??ments sauf les 2 et 10...
x[-1000] # ....
x
x[-c(2,10)] # Idem x[c(-2, -10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect[c("foo", "bar")]
vect[-c("foo", "bar")]
# ----------------------------------------------------------
# SWIRL R Programming 7: Matrices and Data Frames
# ----------------------------------------------------------
my_vector <- 1:20
my_vector
dim(my_vector) # NULL
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
class(my_vector) # estdevenu une "matrix" avec l'attribut dim
my_vector
my_matrix <- my_vector
# matrix is simply an atomic vector with a dimension attribute
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients,my_matrix)
# matrices can only contain ONE class of data !!!! conversion carac...
class(cbind(patients,my_matrix))
# matrices can only contain ONE class of data !!!! conversion en caracteres...
class(cbind(patients,my_matrix))
my_data <- data.frame(patients, my_matrix)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
class(my_data)
# ----------------------------------------------------------
# SWIRL R Programming 8: Logic
# ----------------------------------------------------------
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
# logical operators == < , !=, ...
!( 5 == 7 )
# There are two AND operators in R, `&` and `&&`
# dif.....
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE) # the left operand is only evaluated with the first member
c(TRUE, TRUE, TRUE) && c(TRUE, FALSE, FALSE)
c(F, TRUE, TRUE) && c(TRUE, FALSE, FALSE)
c(F, TRUE, TRUE) && c(TRUE)
# OR | across a vector et || firts element
# vectorised version
TRUE | c(TRUE, FALSE, FALSE)
# non vectorised version
TRUE || c(TRUE, FALSE, FALSE)
6 != 10 && FALSE && 1 >= 2
TRUE || 5 < 9.3 || FALSE
# Regles de priorite
# AND operators are evaluated before OR operators
5 > 8 || 6 != 8 && 4 > 3.9
5 > 8 || (6 != 8 && 4 > 3.9 )
TRUE && FALSE || 9 >= 4 && 3 < 6
TRUE && 62 < 62 && 44 >= 44
6 >= -9 && !(6 > 7) && !(!TRUE)
FALSE || TRUE && 6 != 4 || 9 > 4
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
FALSE || TRUE && 6 != 4 || 9 > 4
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
6 >= -9 && !(6 > 7) && !(!TRUE)
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
isTRUE(6 > 4)
isTRUE(3)
!isTRUE(4 < 3)
isTRUE(3)
!isTRUE(4 < 3)
? isTRUE
?isTRUE
identical('twins', 'twins')
identical('hello', 'Hello')
identical(5 > 4, 3 < 3.1)
isTRUE(as.logical(3))
!isTRUE(4 < 3)
identical('twins', 'twins')
identical('hello', 'Hello')
identical(5 > 4, 3 < 3.1)
# xor() function exclusive OR
xor(5 == 6, !FALSE)
xor(!isTRUE(TRUE), 6 > -1)
xor(4 >= 9, 8 != 8.0)
xor(4 <= 9, 8 == 8)
ints <- sample(10)
ints
sample(20) # random sampling of integers from 1 to 20 without replacement
help(sample)
which(c(TRUE, FALSE, TRUE))
which(ints > 5) # retourne les indices des valeurs TRUE
# prend en parametre un vecteur logique..retourne un vecteur integer
# interessant pour faire des boucles sur parties...
any(ints<0) # retourne TRUE si l'un au moins des elt du vect est TRUE
all(ints>0) # retourne TRUE tous les elt du vect sont TRUE
any(ints == 2.5)
all(ints == 10)
all(c(TRUE, FALSE, TRUE))
any(ints == 10)
# ----------------------------------------------------------
# SWIRL R Programming 9: Functions
# ----------------------------------------------------------
# can be treated like any other R Objects
Sys.Date()
mean(c(2, 4, 5))
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
boring_function <- function(x) {
x
}
boring_function <- function(x) {
x
}
boring_function('My first function!')
class('My first function!')
boring_function
mean
help(sum)
my_mean <- function(my_vector) {
sum <- sum(my_vector, na.rm = TRUE)
# lenght - non missing value only
lenght <- sum(!is.na(my_vector))
mean <- sum/lenght
mean
}
my_mean(c(2, 4, 5, NA))
mean(c(2, 4, 5, NA))
mean(c(2, 4, 5, NA),na.rm = TRUE)
boring_function <- function(x) {
x
}
boring_function('My first function!')
class('My first function!')
boring_function
mean
help(sum)
my_mean <- function(my_vector) {
sum <- sum(my_vector, na.rm = TRUE)
# lenght - non missing value only
lenght <- sum(!is.na(my_vector))
mean <- sum/lenght
mean
}
my_mean(c(2, 4, 5, NA))
mean(c(2, 4, 5, NA))
mean(c(2, 4, 5, NA),na.rm = TRUE)
# modulus operator %% to find the remainder
remainder <- function(num, divisor = 2) {
num %% divisor
}
remainder(3)
remainder(5,3)
# explicitly specify arguments
remainder(divisor = 11, num = 5)
remainder(11,5)
remainder(5,11)
# R can also partially match arguments
remainder(4, div = 2)
args(remainder) # Pour voir les arguments
args(boring_function)
args(remainder) # Pour voir les arguments
args(boring_function)
# You can pass functions as arguments to other functions just like you can pass
evaluate <- function(func, dat){
# Write your code here!
func(dat)
# Remember: the last expression evaluated will be returned!
}
evaluate(mean, c(1,2,3,4))
evaluate(sum, c(1,2,3,4))
evaluate(max, c(1,2,3,4))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
telegram <- function(...){
paste("START", ...,"STOP")
}
telegram("test","test2")
telegram(c("test","test2"))
telegram <- function(arg1, arg2 = "arg2", ..., argn = "z"){
paste("START", arg1, arg2,...,"STOP",argn)
}
telegram("test","test2")
telegram("test")
telegram <- function(arg1, arg2 = "arg2", ..., argn = "z"){
paste("START", arg1, arg2,...,"STOP",argn)
}
telegram("test","test2")
telegram("test")
telegram("test","test2") # test 2 est donc consid??r?? comme le deuxi??me arg
telegram(",a",arg2 ="test")
telegram("test","test2", argn = "OOO")
telegram("test","test2", "OOO")
telegram("test","test2", argn = "OOO", arg2 = "arg2") # test2 est consid??r?? ...
simon_says <- function(...){
paste("Simon says:", ...)
}
simon_says("High")
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ") # le separateur pour concatener
paste(my_char)
paste(my_char, collapse = "x")
paste(my_char, collapse = "")
paste(my_char, collapse = NULL)
?paste
paste("Hello", "world!")
paste("Hello", "world!", sep = " ")
paste("Hello", "world!")
paste(my_char, collapse = " ") # le separateur pour concatener
paste(my_char)
paste(my_char, my_char, collapse = " ") # le separateur pour concatener
paste(c("My","name","is"), c("Mr","John","B"), collapse = " ") # le separateur pour concatener
paste(c("My","name","is"), c("Mr","John","B"), collapse = "-") # le separateur pour concatener
paste(my_char, collapse = " ") # le separateur pour collapser les vecteurs...
paste(c("My","name","is"), c("Mr","John","B"), collapse = "-") # le separateur pour concatener
paste(my_char)
paste(my_char, collapse = "x")
paste(my_char, collapse = "")
paste(my_char, collapse = NULL)
?paste
my_name <- c(my_char, "Greg")
my_name
paste(my_name, collapse = " ") # si 1 seul vecteur en arg donc conc...
paste("Hello", "world!", sep = " ")
paste("Hello", "world!")
paste(1:3, c("X", "Y", "Z"), sep = "") # si deux, ... element a elt...
paste(c("X", "Y", "Z"), c("X", "Y", "Z"), sep = "-") # si deux, ... element a elt...
paste(c("X", "Y", "Z","X", "Y", "Z"), sep = "-") # sep travail avec des vecteurs?...
paste(c("X", "Y", "Z","X", "Y", "Z"), collapse = "-") # ......
paste(c("X", "Y", "Z"), c("X", "Y", "Z"), sep = "-") # si deux, ... element a elt...
simon_says("High", "hello")
simon_says(c("High", "hello"))
simon_says(c("High", "hello"), collapse = "--")
simon_says(c("High", "hello"), sep = "", collapse = "--")
telegram("test","test2")
telegram(c("test","test2"))
telegram(c("test","test2"), collapse = " ")
telegram(c("test","test2"), sep = "." collapse = "-")
telegram(c("test","test2"), sep = ".", collapse = "-")
telegram("test","test2", collapse = "x")
telegram <- function(...){
paste("START", ...,"STOP")
}
telegram("test","test2")
telegram("test","test2", collapse = "x")
telegram("test","test2", sep = ".")
telegram <- function(arg1, arg2 = "arg2", ..., argn = "z"){
paste("START", arg1, arg2,...,"STOP",argn)
}
telegram("test","test2")
telegram("test")
telegram("test","test2") # test 2 est donc considere comme le deuxieme arg
telegram("test",sep = ".",test2") # test 2 est donc considere comme le deuxieme arg
")"
telegram("test",sep = ".","test2") # test 2 est donc considere comme le deuxieme arg
telegram("test",sep = ".","test2","test3") # test 2 est donc considere comme le deuxieme arg
telegram("test",sep = ".",argn="test3") # test 2 est donc considere comme le deuxieme arg
telegram("test",sep = ".",argn="test3","test2") # test 2 est donc considere comme le deuxieme arg
telegram(",a",arg2 ="test")
telegram("test","test2", argn = "OOO")
telegram("test","test2", "OOO")
telegram("test","test2", argn = "OOO", arg2 = "arg2") # test2 est consid??r?? ...
telegram("test","test2")
telegram(c("test","test2"),"a")
# Let's explore how to "unpack" arguments from an ellipses when you use the
# ellipses as an argument in a function. Below I have an example function that
# is supposed to add two explicitly named arguments called alpha and beta.
#
# add_alpha_and_beta <- function(...){
#   # First we must capture the ellipsis inside of a list
#   # and then assign the list to a variable. Let's name this
#   # variable `args`.
#
#   args <- list(...)
#
#   # We're now going to assume that there are two named arguments within args
#   # with the names `alpha` and `beta.` We can extract named arguments from
#   # the args list by used the name of the argument and double brackets. The
#   # `args` variable is just a regular list after all!
#
#   alpha <- args[["alpha"]]
#   beta  <- args[["beta"]]
#
#   # Then we return the sum of alpha and beta.
#
#   alpha + beta
# }
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(place = "Paris", adjective = "qwer", noun = "nom")
mad_libs(place = "Paris",  noun = "nom")
mad_libs(place = "Paris",  noun = "nom", "AAAAAAA")
l<- list(place = "Paris", adjective = "qwer", noun = "nom")
l
mad_libs2 <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args$place
adjective <- args$adjective
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new...")
}
mad_libs(place = "Paris", adjective = "qwer", noun = "nom")
l<- list(place = "Paris", adjective = "qwer", noun = "nom")
l
l<- list(place = "Paris", adjective = "qwer", noun = "nom", "AAAAA")
l
mad_libs2 <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args$place
adjective <- args$adjective
if("place" %in% names(args)) args <- args[ - which(names(args) == "place")]
if("adjective" %in% names(args)) args <- args[ - which(names(args) == "adjective")]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new...")
}
mad_libs(place = "Paris", adjective = "qwer", noun = "nom")
mad_libs2 <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args$place
adjective <- args$adjective
if("place" %in% names(args)) args <- args[ - which(names(args) == "place")]
if("adjective" %in% names(args)) args <- args[ - which(names(args) == "adjective")]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new...", args[[1]])
}
mad_libs(place = "Paris", adjective = "qwer", noun = "nom")
l<- list(place = "Paris", adjective = "qwer", noun = "nom", "AAAAA")
l
l
if("place" %in% names(l)) l <- l[ - which(names(l) == "place")]
l
names(l)
l[[names(l)]]
names(l)
mad_libs2 <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args$place
adjective <- args$adjective
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new...")
}
mad_libs(place = "Paris", adjective = "qwer", noun = "nom")
# The syntax for creating new binary operators in R is unlike anything else in
# R, but it allows you to define a new syntax for your function. I would only
# recommend making your own binary operator if you plan on using it often!
#
# User-defined binary operators have the following syntax:
#      %[whatever]%
# where [whatever] represents any valid variable name.
#
# Let's say I wanted to define a binary operator that multiplied two numbers and
# then added one to the product. An implementation of that operator is below:
#
# "%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
#   left * right + 1
# }
#
# I could then use this binary operator like `4 %mult_add_one% 5` which would
# evaluate to 21.
#
# Write your own binary operator below from absolute scratch! Your binary
# operator must be called %p% so that the expression:
#
#       "Good" %p% "job!"
#
# will evaluate to: "Good job!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left,right)
}
"aaa" %p% "bbb"
"I" %p% "love" %p% "R!"
